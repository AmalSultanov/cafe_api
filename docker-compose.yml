services:
  app:
    build: .
    container_name: cafe_api
    restart: always
    env_file:
      - .env
    expose:
      - "${FASTAPI_PORT}"
    depends_on:
      - cafe_db
      - kafka
    volumes:
      - .:/app
    command: >
      sh -c "alembic upgrade heads && uvicorn src.main:app --reload --host 0.0.0.0 --port ${FASTAPI_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${FASTAPI_PORT}/api/v1/health || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  faststream:
    build: .
    container_name: cafe_faststream
    restart: always
    env_file:
      - .env
    depends_on:
      - kafka
    volumes:
      - .:/app
    command: >
      sh -c "faststream run src.main:faststream"
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f faststream || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  cafe_db:
    image: postgres:16-alpine
    container_name: cafe_db
    restart: always
    env_file:
      - .env
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    env_file:
      - .env
    expose:
      - "${KAFKA_PORT}"
      - "${KAFKA_CONTROLLER_PORT}"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT},CONTROLLER://${KAFKA_HOST}:${KAFKA_CONTROLLER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_HOST}:${KAFKA_CONTROLLER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:${KAFKA_PORT} --list || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  nginx:
    image: nginx:alpine-slim
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.template.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx
    env_file:
      - .env
    depends_on:
      - app
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data: