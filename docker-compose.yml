services:
  app:
    build: .
    image: cafe_api_image
    container_name: cafe_api
    restart: always
    env_file:
      - .env
    expose:
      - "${FASTAPI_PORT}"
    depends_on:
      cafe_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      sh -c "alembic upgrade heads && uvicorn src.main:app --host 0.0.0.0 --port ${FASTAPI_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import http.client; conn=http.client.HTTPConnection(\"localhost\", ${FASTAPI_PORT}); conn.request(\"GET\", \"/api/v1/health\"); r=conn.getresponse(); exit(0) if r.status==200 else exit(1)'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  faststream:
    image: cafe_api_image
    container_name: cafe_faststream
    restart: always
    env_file:
      - .env
    depends_on:
      app:
        condition: service_healthy
    command: >
      sh -c "faststream run src.main:faststream"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f faststream || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  cafe_db:
    image: postgres:16-alpine
    container_name: cafe_db
    restart: always
    env_file:
      - .env
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    env_file:
      - .env
    expose:
      - "${KAFKA_PORT}"
      - "${KAFKA_CONTROLLER_PORT}"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT},CONTROLLER://${KAFKA_HOST}:${KAFKA_CONTROLLER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_HOST}:${KAFKA_CONTROLLER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || true"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    env_file:
      - .env
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: "${KAFKA_UI_USERNAME}"
      SPRING_SECURITY_USER_PASSWORD: "${KAFKA_UI_PASSWORD}"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/api/status || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    env_file:
      - .env
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    ports:
      - "${PROMTAIL_PORT}:9080"
    depends_on:
      loki:
        condition: service_healthy
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  nginx:
    image: nginx:alpine-slim
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.template.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx
    env_file:
      - .env
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  prometheus_data:
  loki_data:
  grafana_data: